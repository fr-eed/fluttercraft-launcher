name: "Build"

on:
  pull_request:
    branches:
      - dev
      - test
      - main
  push:
    branches:
      - dev
      - test
      - main

jobs:  
  build:      
    name: Build & Release 
    runs-on: macos-latest 

    steps:
        #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

        #2 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

        #3 Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

        #4 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

       #6 Building APP
      - name: Build App
        run: flutter build macos --release

        #9 Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/macos/Build/Products/Release/FlutterCraft.app

        #10 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

        #11 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

        #12 Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV
        
        #13 Create Release
      - name: Package into DMG
        run: |
          APP_NAME="FlutterCraft"
          DMG_NAME="${APP_NAME}-${{ env.VERSION }}.dmg"
          APP_BUNDLE="build/macos/Build/Products/Release/${APP_NAME}.app"
          DMG_DIR="build/macos/dmg"
          VOLUME_NAME="${APP_NAME} Installer"
          TEMP_DMG="build/macos/${APP_NAME}-temp.dmg"

          mkdir -p "${DMG_DIR}"

          hdiutil create -volname "${VOLUME_NAME}" -srcfolder "${APP_BUNDLE}" -fs HFS+ -format UDRW -size 100m "${TEMP_DMG}"

          MOUNT_POINT=$(hdiutil attach "${TEMP_DMG}" -nobrowse -mountpoint /Volumes/"${VOLUME_NAME}" | grep Volumes | awk '{print $3}')

          ln -s /Applications "${MOUNT_POINT}/Applications"

          osascript <<EOT
          tell application "Finder"
              tell disk "${VOLUME_NAME}"
                  open
                  set current view of container window to icon view
                  set toolbar visible of container window to false
                  set statusbar visible of container window to false
                  set the bounds of container window to {200, 200, 800, 500}
                  set view options of container window to icon view options
                  tell icon view options of container window
                      set icon size to 128
                      set arrangement to not arranged
                  end tell
                  set position of item "${APP_NAME}.app" of container window to {150, 150}
                  set position of item "Applications" of container window to {400, 150}
                  update without registering applications
                  delay 2
                  close
              end tell
          end tell
          EOT

          hdiutil detach "${MOUNT_POINT}"

          hdiutil convert "${TEMP_DMG}" -format UDZO -o "${DMG_DIR}/${DMG_NAME}"

          rm -f "${TEMP_DMG}"

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/macos/dmg/FlutterCraft-${{ env.VERSION }}.dmg
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
