name: "Linux"

on:
  pull_request:
    branches:
      - dev
      - test
      - main
  push:
    branches:
      - dev
      - test
      - main

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-22.04

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

      # 3. Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 4. Install System Dependencies
      - name: Install Linux Dependencies
        run: |
          sudo apt update
          sudo apt install -y ninja-build g++ cmake webkit2gtk libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev build-essential pkg-config libgtk-3-0 || true

      # 5. Set PKG_CONFIG_PATH for GTK
      - name: Set PKG_CONFIG_PATH for GTK
        run: |
          # Search for gtk+-3.0.pc location
          GTK_PC_PATH=$(sudo find / -name "gtk+-3.0.pc" | head -n 1)
          if [ -z "$GTK_PC_PATH" ]; then
            echo "GTK .pc file not found. Please verify GTK installation."
            exit 1
          fi
          # Extract the directory from the path
          GTK_PC_DIR=$(dirname "$GTK_PC_PATH")
          export PKG_CONFIG_PATH=$GTK_PC_DIR:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig
          echo "PKG_CONFIG_PATH set to $PKG_CONFIG_PATH"
          
      # 6. Verify GTK installation
      - name: Verify GTK installation
        run: |
          pkg-config --modversion gtk+-3.0
          
      # 7. Set up CMake Build Environment
      - name: Set up CMake Build Environment
        run: |
          sudo apt install -y cmake ninja-build
          export CMAKE_MAKE_PROGRAM=/usr/bin/ninja
          export CXX=/usr/bin/g++

      # 8. Build Linux App
      - name: Build App
        run: flutter build linux --release

      # 9. Package App as AppImage
      - name: Package App as AppImage
        run: |
          cd build/linux/x64/release/bundle
          mkdir AppDir
          mv * AppDir/
          wget -q https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage AppDir fluttercraft_launcher.AppImage

      # 10. Extract Version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        shell: bash
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # 11. Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        shell: bash
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # 12. Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        shell: bash
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 13. Upload Release
      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/linux/x64/release/bundle/fluttercraft_launcher.AppImage
          tag_name: v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
